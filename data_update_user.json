{
	"info": {
		"_postman_id": "06ee5001-b762-4a4e-90f7-f5f2d77ecbeb",
		"name": "data_update",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30631997"
	},
	"item": [
		{
			"name": "Log Into User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Check is token exist', function(){\r",
							"\r",
							"pm.expect(JSON.parse(responseBody).token).to.exist;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"token\", JSON.parse(responseBody).token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"mail\": \"{{email_login}}\",\r\n  \"password\": \"{{Pass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register new user Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function first_Name() {\r",
							"\r",
							"    let first_Name = [\"Juliana\", \"Rodrigo\", \"Rosa\", \"Mario\", \"Luna\", \"Ayla\", \"Zara\", \"Mavie\", \"Arlon\", \"Zayan\", \"Zyan\", \"Lizye\", \"Aurora\", \"Alessa\", \"Dante\", \"Luigi\", \"Aaron\", \"Kayron\", \"Yan\", \"Ava\", \"Olivia\"];\r",
							"    let randomItem = first_Name[Math.floor(Math.random() * first_Name.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"FirstName\", first_Name());\r",
							"\r",
							"function last_Name() {\r",
							"\r",
							"    let last_Name = [\"Souza de França\", \"Venceslau de França\", \"Soares\", \"Francisco de França\", \"França\", \"Souza\", \"Venceslau\", \"Santos\", \"Ferreira\", \"Silveira\", \"Oliveira\", \"Moreto\", \"Hamadé\", \"Maressa\", \"Nunes\", \"Menezes\", \"Mendes\", \"Vieira\", \"Pandovan\", \"Lopez\"];\r",
							"    let randomItem = last_Name[Math.floor(Math.random() * last_Name.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"LastName\", last_Name()),\r",
							"\r",
							"    pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));\r",
							"\r",
							"/*function accessProfile() {\r",
							"    let accessProfile = [\"ADMIN\", \"FINANCEIRO\", \"TI\", \"PRODUTOS\", \"RECURSOS HUMANOS\", \"AUDITORIA\", \"ATENDIMENTO\", \"OUVIDORIA\", \"CONTROLADORIA\"];\r",
							"    let randomItem = accessProfile[Math.floor(Math.random() * accessProfile.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"AccessProfile\", accessProfile())*/\r",
							"\r",
							"\r",
							"function email_provider() {\r",
							"\r",
							"    let email_provider = [\"@hotmail.com\", \"@outlook.com\", \"@gmail.com\", \"@yahoo.com\"];\r",
							"    let randomItem = email_provider[Math.floor(Math.random() * email_provider.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Email_Provider\", email_provider())\r",
							"\r",
							"// Gera um número aleatório de onze dígitos\r",
							"function cpf() {\r",
							"    let randomNumber = Math.floor(Math.random() * 90000000000) + 10000000000;\r",
							"    return randomNumber\r",
							"}\r",
							"\r",
							"pm.environment.set(\"CPF\", cpf());\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"Mail\", pm.environment.get(\"FirstName\") + \"_\" + pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"Email_Provider\"))\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"\tpm.response.to.have.status(201);\r",
							"\t})\r",
							"\t\t\t\t\t\t\t\t\t                                  \r",
							" pm.test('Check is fullName true', function(){\r",
							" pm.expect(pm.environment.get(\"FullName\")).to.eq(JSON.parse(responseBody).user.fullName);\r",
							"\t }),\r",
							"\t\t\t\t\t\t\t\t\t\r",
							"pm.test('Check is mail true', function(){\r",
							"pm.expect(pm.environment.get(\"Mail\")).to.eq(JSON.parse(responseBody).user.mail);\r",
							"\t })\r",
							"\t\t\t\r",
							"\t\t\t\t\t\t\t\t\t\r",
							" pm.test('Check is status true', function(){\r",
							"\r",
							"pm.expect(true).to.eq(JSON.parse(responseBody).user.status);\r",
							"\t})\r",
							"\r",
							"pm.environment.set(\"Register_ID_User\", JSON.parse(responseBody).user._id);\r",
							"\r",
							"pm.environment.set(\"Email_User\", JSON.parse(responseBody).user.mail);\r",
							"\t\t\t\t\t\t\t\t\t"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Pass}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Pass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Check is token exist', function(){\r",
							"\r",
							"pm.expect(JSON.parse(responseBody).token).to.exist;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"Token_User\", JSON.parse(responseBody).token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token_User}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"mail\": \"{{Email_User}}\",\r\n  \"password\": \"{{Pass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update New registration Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar alteração\", function(){\r",
							"pm.expect(pm.environment.get(\"FullName_User\")).to.eq(JSON.parse(responseBody).updatedUser.fullName);\t\t\t\r",
							"})\r",
							"\r",
							"pm.test(\"Validar alteração\", function(){\r",
							"pm.expect(pm.environment.get(\"Mail_User\")).to.eq(JSON.parse(responseBody).updatedUser.mail);\t\t\t\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function first_Name() {\r",
							"\r",
							"    let first_Name = [\"Juliana\", \"Rodrigo\", \"Rosa\", \"Mario\", \"Luna\", \"Ayla\", \"Zara\", \"Mavie\", \"Arlon\", \"Zayan\", \"Zyan\", \"Lizye\", \"Aurora\", \"Alessa\", \"Dante\", \"Luigi\", \"Aaron\", \"Kayron\", \"Yan\", \"Ava\", \"Olivia\"];\r",
							"    let randomItem = first_Name[Math.floor(Math.random() * first_Name.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"FirstName\", first_Name());\r",
							"\r",
							"function last_Name() {\r",
							"\r",
							"    let last_Name = [\"Souza de França\", \"Venceslau de França\", \"Soares\", \"Francisco de França\", \"França\", \"Souza\", \"Venceslau\", \"Santos\", \"Ferreira\", \"Silveira\", \"Oliveira\", \"Moreto\", \"Hamadé\", \"Maressa\", \"Nunes\", \"Menezes\", \"Mendes\", \"Vieira\", \"Pandovan\", \"Lopez\"];\r",
							"    let randomItem = last_Name[Math.floor(Math.random() * last_Name.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"LastName\", last_Name()),\r",
							"\r",
							"    pm.environment.set(\"FullName_User\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));\r",
							"\r",
							"\r",
							"\r",
							"function email_provider() {\r",
							"\r",
							"    let email_provider = [\"@hotmail.com\", \"@outlook.com\", \"@gmail.com\", \"@yahoo.com\"];\r",
							"    let randomItem = email_provider[Math.floor(Math.random() * email_provider.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Email_Provider\", email_provider())\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"Mail_User\", pm.environment.get(\"FirstName\") + \"_\" + pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"Email_Provider\"))\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token_User}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token_User}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"{{FullName_User}}\",\r\n  \"mail\": \"{{Mail_User}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/{{Register_ID_User}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"{{Register_ID_User}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Password User Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Check is password true', function(){\r",
							" pm.expect(pm.environment.get(\"Password_Update_User\")).to.eq(JSON.parse(responseBody).password);\r",
							"\t })\r",
							"\r",
							"pm.test('Check is confirm Password true', function(){\r",
							" pm.expect(pm.environment.get(\"Confirm_Password_Update_User\")).to.eq(JSON.parse(responseBody).confirmPassword);\r",
							"\t })\r",
							"\r",
							"     // Verifica se a mensagem no corpo da resposta é a esperada\r",
							"pm.test(\"Verifying response message\", function () {\r",
							"    let message = pm.response.json();\r",
							"    pm.expect(message.msg).to.eql(\"Senha atualizada com sucesso!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function Password_Update() {\r",
							"    const uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
							"    const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
							"    const numbers = '0123456789';\r",
							"    const specialCharacters = '@#$%';\r",
							"\r",
							"    let password = '';\r",
							"\r",
							"    // Adiciona pelo menos uma letra maiúscula\r",
							"    password += uppercaseLetters[Math.floor(Math.random() * uppercaseLetters.length)];\r",
							"\r",
							"    // Adiciona pelo menos uma letra minúscula\r",
							"    password += lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r",
							"\r",
							"    // Adiciona pelo menos um número\r",
							"    password += numbers[Math.floor(Math.random() * numbers.length)];\r",
							"\r",
							"    // Adiciona pelo menos um caractere especial\r",
							"    password += specialCharacters[Math.floor(Math.random() * specialCharacters.length)];\r",
							"\r",
							"    // Preenche o restante com caracteres aleatórios\r",
							"    const remainingLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8 - 4;\r",
							"    for (let i = 0; i < remainingLength; i++) {\r",
							"        const randomType = Math.floor(Math.random() * 4);\r",
							"        switch (randomType) {\r",
							"            case 0:\r",
							"                password += uppercaseLetters[Math.floor(Math.random() * uppercaseLetters.length)];\r",
							"                break;\r",
							"            case 1:\r",
							"                password += lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r",
							"                break;\r",
							"            case 2:\r",
							"                password += numbers[Math.floor(Math.random() * numbers.length)];\r",
							"                break;\r",
							"            case 3:\r",
							"                password += specialCharacters[Math.floor(Math.random() * specialCharacters.length)];\r",
							"                break;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    // Embaralha a senha\r",
							"    password = password.split('').sort(function(){return 0.5-Math.random()}).join('');\r",
							"\r",
							"    return password;\r",
							"}\r",
							"\r",
							"\r",
							"// Gerar senha aleatória e armazenar na variável de ambiente 'random_password'\r",
							"pm.variables.set(\"Password_Update_User\", Password_Update());\r",
							"\r",
							"// Confirmar a senha gerada\r",
							"pm.variables.set(\"Confirm_Password_Update_User\", pm.variables.get\r",
							"(\"Password_Update_User\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token_User}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token_User}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"{{Password_Update_User}}\",\r\n  \"confirmPassword\": \"{{Confirm_Password_Update_User}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/password/{{Register_ID_User}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"password",
						"{{Register_ID_User}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Registration Status Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica se a mensagem no corpo da resposta é a esperada\r",
							"pm.test(\"Verifying response message\", function () {\r",
							"    let message = pm.response.json();\r",
							"    pm.expect(message.msg).to.eql(\"Status do usuario atualizado com sucesso para status true.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token_User}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"status\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/status/{{Register_ID_User}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"status",
						"{{Register_ID_User}}"
					]
				}
			},
			"response": []
		}
	]
}